substitutions:
  ble_mac_addr: ${ble_server_mac}

esphome:
  name:  ${name}
  friendly_name: ${friendly_name}
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true
  project:
    name: ${project_name}
    version: ${project_version} 

# Enable logging
logger:

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  - platform: esphome

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

font:
  - file: 'Comic Sans MS.ttf'
    id: font1
    size: 14
  - file: 'Comic Sans MS.ttf'
    id: CS30
    size: 30

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

globals:
  - id: display_ready
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: show_boot_screen
    type: bool
    restore_value: no
    initial_value: 'true'

ble_client:
  - mac_address: ${ble_mac_addr}
    id: keg_ble_server
    auto_connect: true
    on_connect:
      then:
        - logger.log: "BLE Server connected — initial display update"
        - lambda: |-
            id(display_ready) = true;
            id(show_boot_screen) = false;
        - component.update: my_display
    on_disconnect:
      then:
        - logger.log: "BLE Server **disconnected** — showing disconnect screen"
        - lambda: |-
            id(display_ready)   = true;   // keep main layout active
            id(show_boot_screen)= false;  // boot screen stays off
        - component.update: my_display

sensor:
  # -------------------------------------------------------------
  # Estimated Beers  (triggers display refresh)
  # -------------------------------------------------------------
  - platform: ble_client
    ble_client_id: keg_ble_server
    id: est_beers
    name: "Estimated Beers"
    type: characteristic
    service_uuid: 5b0be147-b4d2-435c-a6b4-0cf09c349393
    characteristic_uuid: 547be5be-dddc-435a-82c9-2d68e26c507c
    notify: true
    on_notify:
      then:
        - logger.log:
            level: DEBUG
            format: "BLE Notify: Estimated Beers received"
        - lambda: |-
            id(display_ready) = true;
            id(show_boot_screen) = false;
        - component.update: my_display
    lambda: |-
      std::string str(x.begin(), x.end());
      return atof(str.c_str());

  # -------------------------------------------------------------
  # Estimated Keg Weight  (no display refresh needed)
  # -------------------------------------------------------------
  - platform: ble_client
    ble_client_id: keg_ble_server
    id: est_keg_weight
    name: "Estimated Keg Weight"
    type: characteristic
    service_uuid: 5b0be147-b4d2-435c-a6b4-0cf09c349393
    characteristic_uuid: 64bcd260-d3c2-40b6-85c2-438d3e07c042
    notify: true
    on_notify:
      then:
        - logger.log:
            level: DEBUG
            format: "BLE Notify: Estimated Keg Weight received"
    lambda: |-
      std::string str(x.begin(), x.end());
      return atof(str.c_str());

  # -------------------------------------------------------------
  # Calibrated Weight  (no display refresh needed)
  # -------------------------------------------------------------
  - platform: ble_client
    ble_client_id: keg_ble_server
    id: cal_weight
    name: "Calibrated Weight"
    type: characteristic
    service_uuid: 5b0be147-b4d2-435c-a6b4-0cf09c349393
    characteristic_uuid: 92a3e3b0-47a5-441c-974e-1f4ffbc6d371
    notify: true
    on_notify:
      then:
        - logger.log:
            level: DEBUG
            format: "BLE Notify: Calibrated Weight received"
    lambda: |-
      std::string str(x.begin(), x.end());
      return atof(str.c_str());

display:
  - platform: waveshare_epaper
    id: my_display
    model: 2.13in-ttgo-b74
    cs_pin: GPIO5
    dc_pin: GPIO17
    reset_pin: GPIO16
    busy_pin: GPIO4
    rotation: 270
    update_interval: never
    lambda: |-
      const int screen_width = 212;
      const int shift_x = 12;

      // Boot screen while waiting for first data
      if (id(show_boot_screen)) {
        std::string boot_msg = "Connecting BLE Server";
        int x0 = (screen_width - boot_msg.length() * 7) / 2 + shift_x;
        it.printf(x0, 50, id(font1), "%s", boot_msg.c_str());
        std::string boot_msg2 = "Waiting for Initial Update";
        int x1 = (screen_width - boot_msg2.length() * 7) / 2 + shift_x;
        it.printf(x1 + 5, 70, id(font1), "%s", boot_msg2.c_str());
        std::string mac = "${ble_mac_addr}";
        int mac_x = (screen_width - mac.length() * 7) / 2;
        it.printf(mac_x + 12, 100, id(font1), "%s", mac.c_str());
        return;
      }

      // Secondary wait screen if not ready
      if (!id(display_ready)) {
        std::string msg = "Connecting BLE Scale";
        int msg_x = (screen_width - msg.length() * 7) / 2;
        it.printf(msg_x, 50, id(font1), "%s", msg.c_str());
        return;
      }

      // If BLE disconnects later
      if (!id(keg_ble_server).connected()) {
        std::string line1 = "Scale";
        std::string line2 = "Disconnected";
        int line1_x = (screen_width - line1.length() * 14) / 2 + shift_x;
        int line2_x = (screen_width - line2.length() * 14) / 2 + shift_x;
        it.printf(line1_x, 20, id(CS30), "%s", line1.c_str());
        it.printf(line2_x, 55, id(CS30), "%s", line2.c_str());
        std::string mac = "${ble_mac_addr}";
        int mac_x = (screen_width - mac.length() * 7) / 2;
        it.printf(mac_x + 12, 100, id(font1), "%s", mac.c_str());
        return;
      }

      // --- Normal display ---
      std::string label = "Beers Remaining";
      int label_x = (screen_width - label.length() * 14) / 2 + shift_x;
      it.printf(label_x, 20, id(CS30), "%s", label.c_str());

      char beers_val[8];
      snprintf(beers_val, sizeof(beers_val), "%.0f", id(est_beers).state);
      int value_x =
          ((screen_width - strlen(beers_val) * 18) / 2) + shift_x + 10;
      it.printf(value_x, 55, id(CS30), "%s", beers_val);

      it.printf(5 + shift_x, 100, id(font1), "Scale: %.1f lb",
                id(cal_weight).state);

      char keg_str[16];
      snprintf(keg_str, sizeof(keg_str), "Keg: %.1f lb",
               id(est_keg_weight).state);
      int keg_text_width = strlen(keg_str) * 7;
      it.printf(screen_width - keg_text_width + shift_x + 10, 100, id(font1),
                "%s", keg_str);
